import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useParams } from "react-router-dom";
import { fetchProductDetails, updateProduct } from "../../redux/slices/productsSlice";
import axios from "axios";

const EditProductPage = () => {
Â  const dispatch = useDispatch();
Â  const navigate = useNavigate();
Â  const {id} = useParams();
Â  const { selectedProduct, loading , error } = useSelector((state)=> state.products);

Â  const [productData, setProductData] = useState({
Â  Â  name: "",
Â  Â  description: "",
Â  Â  price: 0,
Â  Â  countInStock: 0,
Â  Â  sku: "",
Â  Â  category: "",
Â  Â  collections: "",
Â  Â  weight: [],
Â  Â  flavours: [],
Â  Â  images: [
Â  Â  ],
Â  });

Â  const [uploading, setUploading] = useState(false); // Image uplaoding star

Â  useEffect(()=> {
Â  Â  if (id){
Â  Â  Â  dispatch(fetchProductDetails(id));
Â  Â  }
Â  }, [dispatch, id]);

Â  useEffect(()=> {
Â  Â  if(selectedProduct){
Â  Â  Â  setProductData(selectedProduct);
Â  Â  }
Â  },[selectedProduct]);

Â  // âœ… handle normal text/number inputs
Â  const handleChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  setProductData((prevData) => ({ ...prevData, [name]: value }));
Â  };

Â  // âœ… handle image upload + preview
Â  const handleImageUpload = async (e) => {
Â  Â  const file = e.target.files[0];
Â  Â  const formData = new FormData(); // Correct capitalization
Â  Â  formData.append("image", file);

Â  Â  try {
Â  Â  Â  setUploading(true);
Â  Â  Â  const {data} = await axios.post(
Â  Â  Â  Â  `${import.meta.env.VITE_BACKEND_URL}/api/upload`,
Â  Â  Â  Â  formData,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-Type" : "multipart/form-data"
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  }
Â  Â  Â  );
Â  Â  Â  setProductData((prevData) => ({
Â  Â  Â  Â  ...prevData,
Â  Â  Â  Â  images: [...prevData.images, {url: data.imageUrl, altText: ""}], // Corrected altText property name
Â  Â  Â  }));
Â  Â  Â  setUploading(false);
Â  Â  } catch (error) {
Â  Â  Â  console.error(error);
Â  Â  Â  setUploading(false);
Â  Â  }
Â  };

Â  // âœ… remove image
Â  const handleRemoveImage = (index) => {
Â  Â  setProductData((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  images: prev.images.filter((_, i) => i !== index),
Â  Â  }));
Â  };

Â  // âœ… submit handler
Â  const handleSubmit = (e) => {
Â  Â  e.preventDefault();
Â  Â  dispatch(updateProduct({id, productData}));
Â  Â  navigate("/admin/products");
Â  };

Â  if(loading) return <p>Loading...</p>
Â  if(error) return <p>Error...</p>

Â  return (
Â  Â  <div className="max-w-5xl mx-auto p-4 sm:p-6 shadow-md rounded-md bg-white">
Â  Â  Â  <h2 className="text-2xl sm:text-3xl font-bold mb-6">Edit Product</h2>
Â  Â  Â  <form onSubmit={handleSubmit}>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Product Name */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Product Name</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="name"
Â  Â  Â  Â  Â  Â  value={productData.name}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Description */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Description</label>
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  name="description"
Â  Â  Â  Â  Â  Â  value={productData.description}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  rows={4}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Price */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Price</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  name="price"
Â  Â  Â  Â  Â  Â  value={productData.price}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Count In Stock */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Count In Stock</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  name="countInStock"
Â  Â  Â  Â  Â  Â  value={productData.countInStock}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* SKU */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">SKU</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="sku"
Â  Â  Â  Â  Â  Â  value={productData.sku}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Weight */}
<div className="mb-6">
  <label className="block font-semibold mb-2">Weight (comma-separated)</label>
  <input
    type="text"
    name="weight"
    // ðŸ’¡ Fix: Use optional chaining and nullish coalescing
    value={productData.weight?.join(", ") ?? ""}
    onChange={(e) =>
      setProductData({
        ...productData,
        weight: e.target.value.split(",").map((w) => w.trim()),
      })
    }
    className="w-full border border-gray-300 rounded-md p-2"
  />
</div>

{/* Flavours */}
<div className="mb-6">
  <label className="block font-semibold mb-2">Flavours (comma-separated)</label>
  <input
    type="text"
    name="flavours"
    // ðŸ’¡ Fix: Use optional chaining and nullish coalescing
    value={productData.flavours?.join(", ") ?? ""}
    onChange={(e) =>
      setProductData({
        ...productData,
        flavours: e.target.value.split(",").map((f) => f.trim()),
      })
    }
    className="w-full border border-gray-300 rounded-md p-2"
  />
</div>

Â  Â  Â  Â  {/* Category */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Category</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="category"
Â  Â  Â  Â  Â  Â  value={productData.category}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-md p-2"
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Image Upload */}
Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  <label className="block font-semibold mb-2">Upload Images</label>
Â  Â  Â  Â  Â  <input type="file" onChange={handleImageUpload} />
Â  Â  Â  Â  Â  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-4">
Â  Â  Â  Â  Â  Â  {productData.images.map((image, index) => (
Â  Â  Â  Â  Â  Â  Â  <div key={index} className="relative group">
Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={image.url}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={image.altText || "Product"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-24 sm:h-28 md:h-32 object-cover shadow-md rounded-md"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleRemoveImage(index)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="absolute top-1 right-1 bg-red-500 text-white text-xs px-1 rounded opacity-0 group-hover:opacity-100 transition"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  âœ•
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div> Â 
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Submit */}
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  className="w-full bg-green-500 text-white py-2 rounded-md hover:bg-green-600 transition-colors"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Update Product
Â  Â  Â  Â  </button>
Â  Â  Â  </form>
Â  Â  </div>
Â  );
};


export default EditProductPage;